
<!-- saved from url=(0097)http://www.superfish.com/ws/coupons/res.jsp?pi=diigo&v=13.1.1.91&mn=atrevetealeerlos.blogspot.com -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <style>
            body{
    background-color: white;
    margin: 0px;
    padding: 24px 0px 15px 0px;
    overflow: hidden;
    width: 100%;
   /* height: 101%; */
    font-family: Arial, Verdana;
    text-align: left;
    opacity: 1;
}

#h { /*header*/
    border-bottom: solid 1px #cccccc;
    background-color: #ACAEB0;
    color: #666666;
    font-size: 12px;
    height: 22px;
    left: 0;
    overflow: hidden;
    position: absolute;
    top: 0;
    width: 100%;
    z-index: 1050;
}

#hr{ /*header left and right*/
    display: inline-block;
    height: 22px;
    text-align: center;
    line-height:22px;
}

#hl {
    display:none;
}

#hc {
    width: 310px;
    position: absolute;
    height: 22px;
    left: 0;
}

#hl {
    width: 67px;
}

#hr {

    /*text-transform: uppercase;*/
}

#ca{
    left: 68px;
    position: absolute;
    top: 9px;
}

#hl{
    background: none repeat scroll 0 0 #FF542C;
    border-right: 1px dashed #003b73;
    width: 76px;
    line-height:22px;
}

#cs{ /* Cookie setter  */
    position: absolute;
    top: -100px;
    width: 1px;
    height: 1px;
}

#bC{ /*Close*/
   /* background-position:  1px 2px; */
   font-family: Arial;
   font-size: 14px;
   color: #666666;
}

.cb, .cbo{ /* Component buttons */
    position: absolute;
    display: inline-block;
    overflow: hidden;
    top: 2px;
    right: 2px;
    height: 14px;
    width: 13px;
    z-index: 100;
    cursor: pointer;
    /* background: url(../coupons/img/b2.png) no-repeat transparent; */
}

.cbo{ /* Component buttons - over */
    /* background: url(../coupons/img/b2.png) no-repeat #787878; */
    color: #414042;
}

#bP{
    display: none;
}

#res, #cno, #cnn{ /* Result */
    width:100%;
    height: 166px;/* 65px; */
    overflow: auto;
}

/* #res {
    overflow-y: auto;
    overflow-x: hidden;
} */

#res .loadingIcon{
    width:32px;
    height:32px;
    background: url(../coupons/img/loading.gif) no-repeat transparent;
    position:absolute;
    top:45px;
    left:150px;
}

#scs {
    width:100%;
    height: 80px;
    position: absolute;
    text-align: center;
    top: 27px;
    display: none;
}

#scsTl, #cnnBr {
    font-size: 15pt;
    color: #5C9EBF;
    font-weight: bold;
}

#scsTx {
    font-size: 15px;
    padding: 0 10px;
    height: 55px;
    overflow: hidden;
}

#cno, #cnn{ /* Code node  */
    width:100%;
    height: 104px;
    color: #777777;
    display: none;
    font-size: 9pt;
    line-height: 15px;
    position: absolute;
    text-align: center;
    top: 100px;
    padding-top: 10px;
    text-align: center;
}

#cnoBr, #cnnBr {
    border: dashed 1px #000000;
    width: 90%;
    margin-left: 5%;
    padding: 5px 0;
}

#cnnBr {
    font-size: 12pt;
    line-height: 16px;
}

#cnn{
    padding-top: 23px;
}


#m1, #cnn{
    font-size: 14px;
    font-weight: bold;
}

#cod{
    background-color: #5C9EBF; /* #FF542C; */
    border: 1px dashed #003b73;
    color: white;
    cursor: text;
    font-size: 11px;
    font-weight: bold;
    height: 13px;
    margin : 5px;
    padding: 5px;
    text-align: center;
    width: 90px;
    cursor: pointer;
}

#bcg {
    position: absolute;
    width: 100%;
    height: 15px;
    background: #ffffff;
    border-top:solid 1px #CCCCCC;
    bottom: 0;
    left: 0;
}

#disLink, #disLink:hover, #ti, #ti:hover{ /*title*/
    position: absolute;
    padding: 0px 2px 1px 2px;
    bottom: 1px;
    right: 2px;
    line-height: 8px;
    font-family: Arial, Helvetica, Verdana;
    font-style: italic;
    color: #777777;
    /* background-color: white; */
    font-size: 7pt;
    -moz-border-radius:4px;
    border-radius:4px 4px 4px 4px;
    -webkit-border-radius:4px;
    text-decoration: none;
    cursor: pointer;
    z-index: 1000;

}

#ti:hover, #disLink:hover{ /*title*/
    text-decoration: underline !important;
}

#disLink, #disLink:hover {
    bottom: 2px;
    font-size: 11px;
    left: 2px;
    width: 40px;
}


#bP{ /*Pause*/
    right: 17px;
    background-position:  -9px 2px;
}

#res .code, .gtc {
/*    height: 22px; */
    margin: 0;
    border-bottom: solid 1px #b2b2b2;
    padding: 6px;
}
#res .hdl{
    padding: 4px 6px;
}
.brd {
 padding: 8px 0;
 /* border: solid 1px #ffffff; */
}

.ov {
/* border-color: #1E598E; */
background: #e3edf4;
}

.cbl {
    background: none repeat scroll 0 0 #FF542C;
    border-right: 1px dashed #003B73;
    color: white;
    display: inline-block;
    font-weight: bold;
    height: 22px;
    width: 60px;
    line-height:22px;
    float:left;
    padding: 0 10px;
}

.cbl_reason{
    color: white;
    font-weight: bold;
    line-height:22px;
    float:left;
    height:22px;
    padding-left:9px;
}

.cbl_reason:after{
    clear:both;
}

/* .sr {
    display: block;
    height: 20px;
    padding-top: 4px;
} */
#res .hdl .hdlText{
    font-family: sans-serif;
    font-size: 16px;
    padding: 3px 0;
    overflow:hidden;
    width: 100%;
}
.sr, .sr:hover, .it, .it:hover,
#res .hdlText{  /*item*/
    position: relative;
    display: block;
    margin: 0px 0px 0px 4px;
    overflow: hidden;
    text-align: left;
    vertical-align: top;
    font-family: arial, sans-serif;
    font-size: 12px;
    padding: 2px 0;
    /*
    height: 18px;
    line-height: 15px;
    */
    cursor: pointer;
    color: #1E598E;
    text-decoration: none;
}
#res .item.gtc .sr,
#res .item.gtc .sr:hover,
#res .item.code .sr,
#res .item.code .sr:hover{
    /*padding: 8px 0;*/
}
#res .item.hdl .sr,
#res .item.hdl .sr:hover{
    padding:0;
}
.sr, .sr:hover {
    color: #787878;
    font-weight: bold;
    font-size: 14px;
}

/* .sr:hover, .it:hover{
    text-decoration: underline;
} */

.bt,  .bt:hover {
    text-decoration: none;
}

.co{  /* coupon */
    background-color: #FF542C;
    border: 1px dashed #003b73;
    color: white;
    cursor: pointer;
    float: right;
    font-size: 10px;
    font-weight: bold;
    height: 11px;
    margin : 2px 9px 0px 0px;
    padding: 2px;
    text-align: center;
    width: 67px;
}

#sm, #sa{ /*see more*/
    bottom: 2px;
    color: #777777;
    font-size: 11px;
    height: 14px;
    position: absolute;
    width: 115px;
    cursor: pointer;
    margin-left: 47px;
}
#sa{ /*see all - back */
    display : none;
}
#sa:hover{
    text-decoration: underline;
}
.ar{ /*arrow*/
    /* background: url("../coupons/img/b.png") no-repeat scroll -53px 2px transparent; */
    cursor: pointer;
    display: inline-block;
    height: 13px;
    left: 0px;
    overflow: hidden;
    position: relative;
    top: 3px;
    width: 10px;
}
</style>
        <script language="JavaScript" type="text/javascript">
            var ZeroClipboard = {
	
	version: "1.0.7",
	clients: {}, // registered upload clients on page, indexed by id
	moviePath: 'ZeroClipboard.swf', // URL to movie
	nextId: 1, // ID of next movie
	
	$: function(thingy) {
		// simple DOM lookup utility function
		if (typeof(thingy) == 'string') thingy = document.getElementById(thingy);
		if (!thingy.addClass) {
			// extend element with a few useful methods
			thingy.hide = function() { this.style.display = 'none'; };
			thingy.show = function() { this.style.display = ''; };
			thingy.addClass = function(name) { this.removeClass(name); this.className += ' ' + name; };
			thingy.removeClass = function(name) {
				var classes = this.className.split(/\s+/);
				var idx = -1;
				for (var k = 0; k < classes.length; k++) {
					if (classes[k] == name) { idx = k; k = classes.length; }
				}
				if (idx > -1) {
					classes.splice( idx, 1 );
					this.className = classes.join(' ');
				}
				return this;
			};
			thingy.hasClass = function(name) {
				return !!this.className.match( new RegExp("\\s*" + name + "\\s*") );
			};
		}
		return thingy;
	},
	
	setMoviePath: function(path) {
		// set path to ZeroClipboard.swf
		this.moviePath = path;
	},
	
	dispatch: function(id, eventName, args) {
		// receive event from flash movie, send to client		
		var client = this.clients[id];
		if (client) {
			client.receiveEvent(eventName, args);
		}
	},
	
	register: function(id, client) {
		// register new client to receive events
		this.clients[id] = client;
	},
	
	getDOMObjectPosition: function(obj, stopObj) {
		// get absolute coordinates for dom element
		var info = {
			left: 0, 
			top: 0, 
			width: obj.width ? obj.width : obj.offsetWidth, 
			height: obj.height ? obj.height : obj.offsetHeight
		};

		while (obj && (obj != stopObj)) {
			info.left += obj.offsetLeft;
			info.top += obj.offsetTop;
			obj = obj.offsetParent;
		}

		return info;
	},
	
	Client: function(elem) {
		// constructor for new simple upload client
		this.handlers = {};
		
		// unique ID
		this.id = ZeroClipboard.nextId++;
		this.movieId = 'ZeroClipboardMovie_' + this.id;
		
		// register client with singleton to receive flash events
		ZeroClipboard.register(this.id, this);
		
		// create movie
		if (elem) this.glue(elem);
	}
};

ZeroClipboard.Client.prototype = {
	
	id: 0, // unique ID for us
	ready: false, // whether movie is ready to receive events or not
	movie: null, // reference to movie object
	clipText: '', // text to copy to clipboard
	handCursorEnabled: true, // whether to show hand cursor, or default pointer cursor
	cssEffects: true, // enable CSS mouse effects on dom container
	handlers: null, // user event handlers
	
	glue: function(elem, appendElem, stylesToAdd) {
		// glue to DOM element
		// elem can be ID or actual DOM element object
		this.domElement = ZeroClipboard.$(elem);
		
		// float just above object, or zIndex 99 if dom element isn't set
		var zIndex = 99;
		if (this.domElement.style.zIndex) {
			zIndex = parseInt(this.domElement.style.zIndex, 10) + 1;
		}
		
		if (typeof(appendElem) == 'string') {
			appendElem = ZeroClipboard.$(appendElem);
		}
		else if (typeof(appendElem) == 'undefined') {
			appendElem = document.getElementsByTagName('body')[0];
		}
		
		// find X/Y position of domElement
		var box = ZeroClipboard.getDOMObjectPosition(this.domElement, appendElem);
		
		// create floating DIV above element
		this.div = document.createElement('div');
		var style = this.div.style;
		style.position = 'absolute';
		style.left = '' + box.left + 'px';
		style.top = '' + box.top + 'px';
		style.width = '' + box.width + 'px';
		style.height = '' + box.height + 'px';
		style.zIndex = zIndex;
		
		if (typeof(stylesToAdd) == 'object') {
			for (addedStyle in stylesToAdd) {
				style[addedStyle] = stylesToAdd[addedStyle];
			}
		}
		
		// style.backgroundColor = '#f00'; // debug
		
		appendElem.appendChild(this.div);
		
		this.div.innerHTML = this.getHTML( box.width, box.height );
	},
	
	getHTML: function(width, height) {
		// return HTML for movie
		var html = '';
		var flashvars = 'id=' + this.id + 
			'&width=' + width + 
			'&height=' + height;
			
		if (navigator.userAgent.match(/MSIE/)) {
			// IE gets an OBJECT tag
			var protocol = location.href.match(/^https/i) ? 'https://' : 'http://';
			html += '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="'+protocol+'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="'+width+'" height="'+height+'" id="'+this.movieId+'" align="middle"><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="false" /><param name="movie" value="'+ZeroClipboard.moviePath+'" /><param name="loop" value="false" /><param name="menu" value="false" /><param name="quality" value="best" /><param name="bgcolor" value="#ffffff" /><param name="flashvars" value="'+flashvars+'"/><param name="wmode" value="transparent"/></object>';
		}
		else {
			// all other browsers get an EMBED tag
			html += '<embed id="'+this.movieId+'" src="'+ZeroClipboard.moviePath+'" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="'+width+'" height="'+height+'" name="'+this.movieId+'" align="middle" allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="'+flashvars+'" wmode="transparent" />';
		}
		return html;
	},
	
	hide: function() {
		// temporarily hide floater offscreen
		if (this.div) {
			this.div.style.left = '-2000px';
		}
	},
	
	show: function() {
		// show ourselves after a call to hide()
		this.reposition();
	},
	
	destroy: function() {
		// destroy control and floater
		if (this.domElement && this.div) {
			this.hide();
			this.div.innerHTML = '';
			
			var body = document.getElementsByTagName('body')[0];
			try { body.removeChild( this.div ); } catch(e) {;}
			
			this.domElement = null;
			this.div = null;
		}
	},
	
	reposition: function(elem) {
		// reposition our floating div, optionally to new container
		// warning: container CANNOT change size, only position
		if (elem) {
			this.domElement = ZeroClipboard.$(elem);
			if (!this.domElement) this.hide();
		}
		
		if (this.domElement && this.div) {
			var box = ZeroClipboard.getDOMObjectPosition(this.domElement);
			var style = this.div.style;
			style.left = '' + box.left + 'px';
			style.top = '' + box.top + 'px';
		}
	},
	
	setText: function(newText) {
		// set text to be copied to clipboard
		this.clipText = newText;
		if (this.ready) this.movie.setText(newText);
	},
	
	addEventListener: function(eventName, func) {
		// add user event listener for event
		// event types: load, queueStart, fileStart, fileComplete, queueComplete, progress, error, cancel
		eventName = eventName.toString().toLowerCase().replace(/^on/, '');
		if (!this.handlers[eventName]) this.handlers[eventName] = [];
		this.handlers[eventName].push(func);
	},
	
	setHandCursor: function(enabled) {
		// enable hand cursor (true), or default arrow cursor (false)
		this.handCursorEnabled = enabled;
		if (this.ready) this.movie.setHandCursor(enabled);
	},
	
	setCSSEffects: function(enabled) {
		// enable or disable CSS effects on DOM container
		this.cssEffects = !!enabled;
	},
	
	receiveEvent: function(eventName, args) {
		// receive event from flash
		eventName = eventName.toString().toLowerCase().replace(/^on/, '');
				
		// special behavior for certain events
		switch (eventName) {
			case 'load':
				// movie claims it is ready, but in IE this isn't always the case...
				// bug fix: Cannot extend EMBED DOM elements in Firefox, must use traditional function
				this.movie = document.getElementById(this.movieId);
				if (!this.movie) {
					var self = this;
					setTimeout( function() { self.receiveEvent('load', null); }, 1 );
					return;
				}
				
				// firefox on pc needs a "kick" in order to set these in certain cases
				if (!this.ready && navigator.userAgent.match(/Firefox/) && navigator.userAgent.match(/Windows/)) {
					var self = this;
					setTimeout( function() { self.receiveEvent('load', null); }, 100 );
					this.ready = true;
					return;
				}
				
				this.ready = true;
				this.movie.setText( this.clipText );
				this.movie.setHandCursor( this.handCursorEnabled );
				break;
			
			case 'mouseover':
				if (this.domElement && this.cssEffects) {
					this.domElement.addClass('hover');
					if (this.recoverActive) this.domElement.addClass('active');
				}
				break;
			
			case 'mouseout':
				if (this.domElement && this.cssEffects) {
					this.recoverActive = false;
					if (this.domElement.hasClass('active')) {
						this.domElement.removeClass('active');
						this.recoverActive = true;
					}
					this.domElement.removeClass('hover');
				}
				break;
			
			case 'mousedown':
				if (this.domElement && this.cssEffects) {
					this.domElement.addClass('active');
				}
				break;
			
			case 'mouseup':
				if (this.domElement && this.cssEffects) {
					this.domElement.removeClass('active');
					this.recoverActive = false;
				}
				break;
		} // switch eventName
		
		if (this.handlers[eventName]) {
			for (var idx = 0, len = this.handlers[eventName].length; idx < len; idx++) {
				var func = this.handlers[eventName][idx];
			
				if (typeof(func) == 'function') {
					// actual function reference
					func(this, args);
				}
				else if ((typeof(func) == 'object') && (func.length == 2)) {
					// PHP style object + method, i.e. [myObject, 'myMethod']
					func[0][ func[1] ](this, args);
				}
				else if (typeof(func) == 'string') {
					// name of function
					window[func](this, args);
				}
			} // foreach event handler defined
		} // user defined handler for event
	}
	
};
var clickedRow = 0;
var abTestDataQS = "";
var p = { // PARAMS
    clientVersion : 0,
    xdMsgDelimiter : "*sfxd*",
    unInstallCoupons: "sf_uninstall_coupons",
    unInstallWp:"sf_uninstall",
    tagId:0,
    $ : 0,
    u : { // URLs
        jq : "http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js",
        sd : function() {
            var domain = "http://www.superfish.com";
            return (window.location.protocol.indexOf( "https" ) > -1 ? domain.replace("http:","https:") : domain);
        }(),
        ai : "/coupons/img/",
        ac : "/ws",
        ts : "trackSession.action",
        au : "/ws/cpn.action",
        vv : 0,
        cc : 0 // category coupon;
    },

    mn: "atrevetealeerlos.blogspot.com",

    a : 50,  // animation time per line
    iFc : 0, //inject flash cookie - flag for IE9
    ck: {       /* cookies */
        vv: 'sf_valid_version',
        er: "Are cookies enabled? Please check your browser's privacy policy.",
        al: 0, // s flag
        a: {
          // e: 3*1000*60,
          e: +("86400000"),
          n: "cpnSu_All",
          v: 0,
          s: 0
        },
        pd: +("86400000"),   /* cookie per domain - expiration */
        pdn: 'cpnSu_',
        gc: 'cpnGc_',   /* cookie for "Get Coupon" */
        ar: []
    },
    ac: 0, /* flag cpn action sent */

    fe : +("1"),

    iIt: 0,     /* flag */
    c : { // coupon
        r : 65, // res node default height
        h : 22,
        n : 0, //num of coupons
        tl : 50,
        hdll: 36,
        f  : 0,  // Full open mode
        op : 1, /* open mode or toolbar */
        b : 0,  // Active button - 0 - get code, 1 - Get coupon
        m : [   // Messages
            ["Click to Copy Coupon Code", ""],
            ["Coupon Code Copied!", " Has been copied to your clipboard.<br>Paste in the coupon field at the checkout page"] ]
    }
}

var e = { // EVENTS
    i : function( ar ){ // INIT
        var _x = 0;
        e.eh( p.$("#bC")[0] );            // Button Close
        e.eh( p.$("#bP")[0] );            // Button Minimize
        p.$('#hc').click(function() {
            var buttonClose = p.$("#bC")[0];
            if(buttonClose.mi){
                e.be(buttonClose, 2);
            }
        });
        //p.$("#sm").click(                 // See more
//        NOT RELEVANT FOR THE NEW UI
//        p.sm.click(
//        function(){
//            p.c.f = 1;
//            var _h = p.c.h * p.c.n;
//            a.p( top, "3022|" + _h + "|" + p.a * ( p.c.n > 3 ? p.c.n - 3 : 0 ) );
//            p.rs.animate({
//                height: ( _h + "px")
//            }, p.a * 2 );
//            p.$(this).hide();
//        } );

        p.$("#sa").click(                 // See all / back
        function(){
            if(p.c.cb){
                try{
                    p.c.cb.destroy();
                }catch(e){}
            }
            a.p(top, "3037");

            // a.ca(1);
            p.$("#res").css({
                "opacity": 1
            });
            p.$("#sa, #scs, #cno, #cnn").hide();

            p.c.b = 0;
            if(!p.c.f) {
                a.b("3100");
            }
        } );

        x = function(jn) {
            var ji = p.$('.it', jn);
            var n = +(ji[0].id.split('_')[1]);
            a.r(n+1, 1);
        }

        p.$('.gtc', p.rs).hover(function(){
            p.$(this).addClass('ov');
        }, function() {
            p.$(this).removeClass('ov');
        });

        p.$('.code', p.rs).hover(function(){
            p.$(this).addClass('ov');
        }, function() {
            p.$(this).removeClass('ov');
        });

        p.$('.gtc a', p.rs).click(function(){
            clickedRow = this;
            a.rowClickHandler('gtc');
            /* Oct 14 2012: removed checkAppVersion logic from here to sf main. Part of adding new cookie module.
             if (!p.u.checkVv || !p.$.cookie.isSupported() || p.$.cookie(p.ck.vv)) {
                a.rowClickHandler("gtc");
            }
            else {
                a.p(top, '3041|'+this.href);
                return false;
            }*/
        });

        p.$('.code', p.rs).click(function(){ //intercept row click
            clickedRow = this;
            a.rowClickHandler('code');
            /* Oct 14 2012: removed checkAppVersion logic from here to sf main. Part of adding new cookie module.
             if (!p.u.checkVv || !p.$.cookie.isSupported() || p.$.cookie(p.ck.vv) || true) {
                a.rowClickHandler('code');
            }
            else {
                a.p(top, '3040');//ask host to validate client version
            }*/
        });

        p.c.c = p.$("#cod");
        ZeroClipboard.setMoviePath( 'ZeroClipboard10.swf' );
        p.ti.off().click(function() {
            a.p(top, "3060" + p.xdMsgDelimiter + p.se + p.xdMsgDelimiter + 1);   // info popup
        });

        p.disLink.off().click(function() {
            a.p(top, "3060" + p.xdMsgDelimiter + p.se + p.xdMsgDelimiter + 2);   // info popup
         });
    },
    
    eh : function ( _o, _a ) { // EVENTs HOOKING // o - object, action
        _o.onmouseover = function () {
            e.be(this, 1);
        };
        _o.onmouseout = function () {
            e.be(this, 0);
        };
        _o.onclick = function () {
            e.be(this, 2);
        };
    },

    ch : function(b) {  /* CHANGE BUTTON (button) */
//            b.style.backgroundPosition = ( b.mi ? "1px 2px" : "-20px 2px" );
//            b.title = ( b.mi ? " Close " : "  Maximize " );
//            var hcCursorStyle = (b.title == "  Maximize " ? "pointer" : "default");
//            p.$('#hc').css("cursor", hcCursorStyle);
            b.mi = !b.mi;
    },

    be : function ( _o, _a ) { // BUTTONS EVENTS // o - object, action
        _o.className = ( _a == 1 ? "cbo" : "cb" );
        if( _a == 2 ){      /* click */

            var ic = 0;
            if( _o.id == "bC" ){
                e.ch(_o);
                p.c.f = 0;
                var vl = a.gc(p.ck.a.n);
                if (vl == null || vl == "" || vl == "disabled") {
                    a.sc(p.ck.a.n, 1, p.ck.a.e);
                }
            }
            // close 3020
            // more results 3022
            var _cm = ( _o.id == "bC" ? '3020' :  "3022" );

            a.p( top, _cm + p.xdMsgDelimiter + p.u.fc + p.xdMsgDelimiter + p.se );
        }
    }
}

var reportEvent = function(msg, level, source) {
    a.p(top, '3900' + p.xdMsgDelimiter + msg + p.xdMsgDelimiter + level + p.xdMsgDelimiter + source); //host reports the event
}

var a = { // API

    i: function(){ // INIT
        p.u.uninstWS = +(a.gc(p.unInstallWp));
        if(p.u.uninstWS) {
            a.p( top, "3010");
            return;
        }
        p.u.uninst = +(a.gc(p.unInstallCoupons));
        if(p.u.uninst) {
            a.p( top, "3010");
            return;
        }

        p.ck.d = p.mn.replace(/\./g, '_');

        if (!p.iIt) {
            p.iIt=1;
            p.u.sd = (window.location.protocol.indexOf( "https" ) > -1 ? p.u.sd.replace("http:","https:") : p.u.sd);
            a.b("3051");
            window.superifsh_xdmsg = a.xd;
            a.xd.it( a.b );

            var d = p.mn.replace(/\./g, '_');
            var dm = parseInt(a.gc(p.ck.pdn + d), 10);
            var nv = 1; //num of views
            if (!dm) {
                nv = 1;
            }
            else {
                nv = dm+1;//this gets written to cookie later ( in a.d) )
            }

            //set p.ck.a.v before sending 3017 to host!
            p.ck.a.v = a.gc(p.ck.a.n); // + p.ck.d); //cpnSu_All value
            a.p( top, "3017" + p.xdMsgDelimiter + nv );
            p.rs = p.$("#res");
            // p.sm = p.$("#sm");
            p.ms = [ p.$("#m1"), p.$("#m2")];
            p.ti = p.$("#ti");
            p.disLink = p.$("#disLink");
            p.disWindow = p.$("#disWindow");
            p.disOk = p.$('#disOk', p.disWindow);
            p.disCancel = p.$('#disCancel', p.disWindow);
        }
    },

    noCookieSupport: function(){
        a.p( top, "3017" + p.xdMsgDelimiter + "-1" );
    },

    rowClickHandler: function(cl) {//called after host validates client version
        a.p(top, "3038"); // increase iframe size
        var jClRow = p.$(clickedRow);
        var txt = jClRow.attr('title');
        var jIt = p.$('.it', jClRow);
        if (!jIt.length) {
            jIt = p.$('.it', jClRow.parent());
        }
        txt = txt || jIt.attr('title');
        txt = txt || jClRow.text();
        p.$('#scsTx').text(txt);

        p.ms[0].text(p.c.m[0][0]);
        p.ms[1].html(p.c.m[0][1]);

        if(cl == 'code') {
            x(jClRow);
            a.ca(0, jClRow.attr("code") );
        }
        else {
            x(jClRow.parent());
            p.c.b = 1;

            //if code exists, add it to txt so we can show on new tab:
            if(code = p.$(jClRow).parent().attr('code')) {
                txt += p.xdMsgDelimiter + code;
            }
            a.sc(p.ck.gc, txt, 60*1000);
            a.ca(0);
        }
    },

    ch: function(bt) {
        e.ch(bt);
    },

    b:  function( str ){ // BACK CALL FROM HOST // s - string json
        var v = str.split(p.xdMsgDelimiter);
        s = v[0];
        if( s == "3050" || s == "3051"  ){
            var ft = 1;
            if (s == "3050") {
                ft = 0.99;
            }
            p.$("body").fadeTo(250, ft);
        }
        else if (s == "3030") {
            a.ch(p.$("#bC")[0]); /* change button */
        }
        else if (s == "3100") { //show 'see more' link
            // p.$(p.sm).fadeIn('350');
        }
        else if (s == '3101') { //hide 'see more' link
          //  p.$(p.sm).hide();
        }
        else if (s == '3500') { //delete all cookies
            a.dac();
        }
        else if (s.indexOf('4000') > -1) { //got clientVersion
            s = s.split(p.xdMsgDelimiter);
            p.clientVersion = s[1];
            reportEvent('received clientVersion from host: '+p.clientVersion, 'debug', 'cpn iframe:197');
        }

        else if(s == '3043') { //client version valid, trigger row click
            a.sc(v[1], '1', 999*24*60*60*1000);
            if (v[1] == p.ck.vv) {
                // a.rowClickHandler(clickedRow.getAttribute('class'));
            }
        }

        else if (s == '3017') {
            var defferedLoading;
            if(v[2] == '2') {
                deferredLoading = true;
            }
            else {
                deferredLoading = v[2] == '1' ? false : (!parseInt(p.ck.a.v, 10)? 0 : parseInt(p.ck.a.v, 10));
            }

            var _o = 0;
            try {
                _o = eval( "(" + v[1] + ")" );
				if(_o.abTestDataQueryString.length > 0) {
					abTestDataQS = _o.abTestDataQueryString;
				}
				_o.br = a.dtBr();
            }
            catch(e){
                _o = 0;
            }
            if (_o) {
                var userId = _o.ui;//p.ui = _o.ui;   // User ID - WS
                var dDate = new Date();
                if (userIdUtil.needToChange(userId)) {
                  userId = userIdUtil.get();
//                  if (window.console) {
//                    console.log(dDate.getTime() + " - Need to Send new userid from iframe.js to host - " + userId + " ( was : " + _o.ui + ")");
//                  }
                  if(a){
//                      a.log(dDate.getTime() + " - Sending new userid from iframe.js to host - " + userId + " ( was : " + _o.ui + ")");
                      a.p(top,"-9741" + p.xdMsgDelimiter + userId + p.xdMsgDelimiter + "coupons iframe.js");// Send New UserId to host
                  }
//                }else{
//                  if (window.console) {
//                    console.log(dDate.getTime() + " - iframe.js called with the userid - " + userId);
//                  }
                }
                p.ui = userId;
                _o.ui = userId;

                p.mn = p.mn == '-1' ? _o.mn : p.mn;   // Merchant Name - WS
                p.mn = p.mn == '-1' ? _o.mn : p.mn;   // Merchant Name - WS
                p.se = _o.se = a.uid(); // Session
                p.pi = _o.pi; // Publisher ID / dlsource
                p.by = _o.by;
                p.st = _o.st; /* site type */
                p.pt = _o.pt;
                p.subdlsource = _o.subdlsource;

                if(!p.ac) {
                    delete _o.su;
                    delete _o.by;
///////////////////////////////////////////////
                    if(p.st=="blws"){ // if Black list window Shopper
                         // skip getCoupons.. and start display :)
                         a.dispCoupon();
                    }
                    else if(!deferredLoading) {
                        a.getCoupons(_o);
                    }
                    else {
                        a.d(_o, deferredLoading);
                    }
                }
                p.$("#ti").text(p.by);
            }
        }
    },

    getCoupons: function(_o) {
        p.ac = 1;
        p.$.ajax({
            url: p.u.sd + p.u.au,
            data: _o,
            type: "GET",
            async: true,
            error: function( _o ) {
            } ,
            success:  function( v ) {
                var _o = ( typeof( v ) != "object" ?  eval( "(" + v + ")" ) : v );
                a.d( _o);
            }
        });
    },

    p: function( _w, _d ){ // POST DATA TO HOST WINDOW
        try{
            if ( _w != window ) {
                a.xd.pm( _w, _d );
                }
        }catch(e){
        }
    },

    setHeader: function(headline, mn, resultType) {
        var cdm = headline;

        if (cdm == undefined || cdm == "")
            cdm = mn;
        else
            if (resultType ==  "COUPON_CATEGORY" || resultType == "DOMAIN_CATEGORY"){
                  cdm = cdm.replace("HOME_","").replace("_GENERIC","");
                  cdm = cdm.toLowerCase().replace(/_/g, " ");
            }
            else
                cdm = cdm.toLowerCase();

        p.cdmTd = cdm.charAt(0).toUpperCase() + cdm.slice(1);
        p.$('#hr').html("<span class = 'cbl'>COUPONS</span> <span class='cbl_reason'>" + p.cdmTd + "</span>");

        return cdm;
    },

    dispCoupon: function (){
        if(p.st == "blws"){    // if is black list window shopper
            var ck2 = a.gc(p.ck.gc + p.ck.d);
            if (ck2 && ck2 != '0' && ck2 != 'disabled'){ // check if we came from a coupon click
                    var cpnCode, ckArr;
                    if(ckArr = ck2.split(p.xdMsgDelimiter)) {
                        ck2 = ckArr[0];
                        cpnCode = ckArr[1];
                    }
                    a.p(top, "3018" + p.xdMsgDelimiter + ck2 + p.xdMsgDelimiter + "1"); //message = we are ready
                    e.i(); // init params

                    p.$('#scsTx').text(ck2);
                    a.p(top, "3038");
                    p.c.b = 1;

                    if(cpnCode) {
                        a.ca(1, cpnCode); // display our code
                    }else {
                        a.ca(0); // no code is necessary - show that.
                    }
                    p.$("#sa").hide();   // hide coupons "back" button.. since we're in black list.
            }
        return;
        }
    },

    d: function(_v, deferredLoading){ // DISPLAY RESULTS /* _v = coupon data
        var cdm = a.setHeader(_v.headline, p.mn, _v.resultType);
        var _c = _v.c || [];
        var ck2 = a.gc(p.ck.gc);
        p.c.n = _c.length;

        if( _c.length > 0 || deferredLoading || ck2){
            var now = new Date().getTime();
            var _t = (_v.bt ? +_v.bt : now);
            var ir = now - _t;

            if (p.st != 3 || p.st == 3 && p.fe /*ir < 20000 */ ) {
                var ck = p.ck.a.v == null ? 0 : p.ck.a.v;
                var d = p.mn.replace(/\./g, '_');
                var dm = a.gc(p.ck.pdn + d);
                var nv = 1; //num of views
                if (dm == null) {
                    //a.sc(p.ck.pdn + d, nv, p.ck.pd);
                }
                else {
                    //a.sc(p.ck.pdn + d, ((+dm)+1), p.ck.pd);
                    nv = (+dm)+1;
                }
                a.sc(p.ck.pdn + d, nv, p.ck.pd);

                var loadingIcon = {};
                try{
                    loadingIcon.length = p.rs.find('.loadingIcon').length;
                }
                catch(ex) {
                    loadingIcon.length = 0;
                }

                if(loadingIcon != null && typeof loadingIcon.length != 'null' && loadingIcon.length > 0) {
                    ck = 0; //so host doesn't minimize the iframe while loading
                }

                a.p(top, "3018" + p.xdMsgDelimiter + ck + p.xdMsgDelimiter + nv);      // We are ready to show results
                var _y = "";
                if(deferredLoading) {
                    _y = "<div class='loadingIcon'></div>";
                } else {
                    p.rs.find('.loadingIcon').remove();
                    for( var _x in _c ){
                        _y += a.h(_c[ _x ], _x, cdm); // Generate items HTML
                    }
                }

                /*if(ck) {
                    alert('272 '+p.c.f);
                    p.$(p.c.f).css('height', '0px');//will start minimized so hide
                }*/
                p.rs.append( _y );      // Inject to HTML

//                if (_c.length < 4) {
//                    p.sm.hide();
//                }
                p.im = p.$('#cs', p.rs);
                e.i(_c);                   // Events Init
                
                var data = {
                    "action" : "coupon search",
                    "userid" : p.ui,
                    "sessionid" : p.se,
                    "merchantName" : p.mn,
                    "siteType" : p.st,
                    "pageType" : p.pt,
                    "dlsource" : p.pi,
                    "sub_dlsource": p.subdlsource,
                    "browser": a.dtBr()
                };
                
                a.trs(data);
                
                if(ck2) { //check if coupon code was added to cookie value
                    var cpnCode, ckArr;
                    if(ckArr = ck2.split(p.xdMsgDelimiter)) {
                        ck2 = ckArr[0];
                        cpnCode = ckArr[1];
                    }
                }

                var date = new Date(), oldDate = date.setTime(date.getTime() - 10000);

                if (ck2 != null && ck2 != '0' && ck2 != 'disabled') {
                    // alert('cpniframe 424 '+ p.ck.gc + p.ck.d);
                    userStorage.clear(p.ck.gc);

                    // a.sc(p.ck.gc + p.ck.d, '0', oldDate);

                    p.$('#scsTx').text(ck2);
                    a.p(top, "3038");
                    p.c.b = 1;
                    a.r(1, 0,false);
                    var showBackButton = _c.length > 0 ? true : false;
                    if(cpnCode) {
                        a.ca(1, cpnCode, showBackButton);
                    } else {
                        a.ca(0, false, showBackButton);
                    }
                }
            }
        } else{
            a.p( top, "3010");      // Nothing to show
        }
    },

    r: function(_n, report, sendCouponImpression) {   /* row click */
        var _it = p.$(".IT_" + (_n - 1) );
        var _li = _it.attr("ln");
        _li = (_li ? _li : _it.attr("href"))

        if (sendCouponImpression == undefined || sendCouponImpression){
            var parent = _it.parent();
            if (parent == undefined || (parent != undefined && parent.attr("code") != ""))
                p.im.attr('src', _li );
        }

        var tl = _it.attr('title');
        tl = (tl ? tl : "No Description Problem");
        var cpnSrcId = _it.attr('cpnSrcId');
        var cpnId = _it.parent().attr('cpnid');

        a.b("3101"); //hide 'see more' link
        if (report) {
            a.p(top, "3036" + p.xdMsgDelimiter + _n + p.xdMsgDelimiter + tl + p.xdMsgDelimiter + p.se + p.xdMsgDelimiter + cpnSrcId + p.xdMsgDelimiter + cpnId);
        }
    },

    trs: function(dto){     /* track session */
    	var urlString = p.u.sd + p.u.ac + "/" + p.u.ts;

		if(abTestDataQS.length > 0) {
			urlString += "?"+abTestDataQS;
		}
	    p.$.ajax({
            url: urlString,
            data: dto,
            type: "GET",
            async: true,
            error: function(dt) {
            } ,
            success:  function(dt) {
            }
        });
    },

    ca: function( _a, _co, showBackButton){ // Clipboard action: 1 - show, 0 - hide, _co  - code
        if(typeof showBackButton == 'undefined'){
            showBackButton = true; //backwards compatible
        }

        if(_co) {
            p.ms[0].text(p.c.m[0][0]);
            p.ms[1].html(p.c.m[0][1]);
        }

        var _t = ( _a && !_co ? 450 : 450  );
        var _p = ( _a && !_co ? 100 : 0  );
        var _c = ( _a && !_co ? 0 : 100  );

        var _f = function(){
            p.$(this).hide();
            if(p.c.cb){
                p.c.cb.hide();
            }
        };

        var _f2 = function() {
            p.$(this).css({
                opacity: 1,
	            display: 'block'
            });
        };

        p.rs.fadeTo( _t, _p );
        var scs = p.$( "#scs" );
        scs.fadeTo( _t, _c, ( _a && !_co ? _f : _f2 ) );

        var elementId;
        if(p.c.b && !_co) {
            elementId = '#cnn'; //coupon not necessary
        }
        else if(_co) {
            elementId = '#cno';
        }
        p.$(elementId).fadeTo( _t, _c, ( _a && !_co ? _f : _f2 ) );

        //if ( !p.c.f ){
            // p.$("#sm").fadeTo( _t, _p );
            // p.sm.fadeTo( _t, _p );
        //}

        if(showBackButton) {
            p.$("#sa").fadeTo( _t, _c, ( _a && !_co ? _f : "" ) );
        }

        if( (!p.c.b && !_a) || _co ){
            p.c.c.text( _co );
            setTimeout(
            function(){
                p.c.cb = new ZeroClipboard.Client();
                p.c.cb.setText( _co );
                p.c.cb.addEventListener(
                'mouseDown', function(client) {
                    p.ms[0].fadeOut(700,
                    function(){
                        p.ms[0].text(p.c.m[1][0]).fadeIn(500,
                        function(){
                            p.$(this).fadeOut( 500,
                            function(){ p.$(this).fadeIn(500);})
                        })
                    });
                    p.ms[1].fadeOut(700,
                    function(){
                        p.ms[1].html(p.c.m[1][1]).fadeIn(500,
                        function(){
                            p.$(this).fadeOut( 500,
                            function(){ p.$(this).fadeIn(500);})
                        })
                    });
                } );
                p.c.cb.glue( p.c.c[0] );
                p.c.cb.setHandCursor( true );
            }, 1000);
        }
    },
    gc: function(name) { //get cookie
        return userStorage.get(name);
    },
    sc: function(cn, cv, st){    /* set cookie (cookie name, cookie value, sleep time) */
        // var cn = p.ck.ar[i].name + cookie;
        // var st = (p.ck.ar[i].exp);      /* sleep time */
        //document.cookie = cn + "=" + cv + "; expires='" + a.gce (st) + "'; path=" + p.u.ac;
        userStorage.set(cn, cv, st);
        // p.$.cookie(cn, cv, { expires: a.gce (st), path: p.u.ac });

//         if( p.$.cookie(cn) == null && !p.ck.al) {
//                p.ck.al = 1;
//         }
    },
    dac: function() {//delete all cookies
        // var date = new Date();
        // var oldDate = date.setTime(date.getTime() - 10000);
        // alert(p.ck.pdn + p.mn.replace(/\./g, '_'));
        userStorage.clear(p.ck.a.n);
        userStorage.clear(p.ck.pdn + p.mn.replace(/\./g, '_'));

        // a.sc(p.ck.a.n /*+ p.ck.d */,"",oldDate); //delete cpnSu_All
        // a.sc(p.ck.pdn + p.mn.replace('.', '_'),"",oldDate); //delete merhant domain cookie
    },
    // gce : function( time ){     /* get cookie exp */
    //     var date = new Date();
    //     date.setTime( date.getTime() + ( time ) );
    //     return date.toGMTString();
    // },
    h : function(_o, _n, cdm) { // ITEM HTML // _v - value, _n - number, cdm - coupons domain (for matrix)
        var _t = ( !_o.code || cdm != p.mn   ?  'Get Coupon' : 'Copy Code' );
        var _cl = ( !_o.code || cdm != p.mn ?  'item gtc ' : 'item code' );

        //using safeTitle prevents title from being null or empty:
        var safeTitle = _o.title;
        if(typeof safeTitle != 'string' || (typeof safeTitle == 'string' && safeTitle.length == 0)) {
            safeTitle = _o.description;
        }

        var headline = "";
        if (typeof _o.headline == 'string' && _o.headline.length > 0) {
            headline = _o.headline;
        }

        var _ct = safeTitle;
        var _sr = _o.source;
        var _cHeadline = a.tr(headline, p.c.hdll, '...');


        //_sr = _sr.charAt(0).toUpperCase() + _sr.slice(1);
        _sr = p.cdmTd;
        var ot = _ct.match(/<b>/gi);
        var st = _ct.match(/<\/b>/gi);

        var trn = p.c.tl;
        trn = (ot ? (trn + ot.length*3) : trn);
        trn = (st ? (trn + st.length*4) : trn);

        _ct = a.tr(_ct, trn, '...' );  // Cutted text
        var pr = _ct.match(/<\/?b?\.\.\./i);
        if (pr && pr[0]) {
            _ct = _ct.replace(pr[0], "")
        }
        ot = _ct.match(/<b>/gi);
        st = _ct.match(/<\/b>/gi);

        if (ot && st && ot.length > st.length || ot && ot.length == 1 && !st) {
            var tt = (st ? ot.length - st.length : 1);
            for (var i = 0; i < tt; i++) {
                _ct += "</b>";
            }
        }
        var pos = +(_n)+1;

        var lnk = decodeURIComponent(_o.couponUrl);
        if (lnk.indexOf("http://") == -1 && lnk.indexOf("https://") == -1)
             lnk = "http://" + lnk;


        var hr = (!_o.code || cdm != p.mn ? 'href="' + lnk + '" target="_blank"' : 'ln="' + _o.couponUrl + '"');
        var ttl = safeTitle.replace(/<b>/g, "").replace(/<\/b>/g, "").replace(/["]/g, "'");

        var advertizerDomain = _o.advertizerDomain;
        if (advertizerDomain)
            advertizerDomain = advertizerDomain.replace("www.","");
        else
            advertizerDomain = "";

        if(safeTitle != headline && safeTitle.length > 0 && headline.length > 0) {
            _cl += " hdl";
            return (
                ( _n == 0 ? '<img id="cs"/>' : '' ) +
                '<div class="' + _cl + '"" code="' + (_o.code || "") + '"  cpnid="' + _o.id + '" advdomain = "' + advertizerDomain + '" >' +
                    '<a class="sr IT_' + _n + '" ' + hr + ' title="' + ttl + '" cpnSrcId = "' + _o.source + '" >' + _o.advertizer + '</a>' +
                    '<a class="hdlText IT_' + _n + '" ' + hr + ' title="' + headline + '" cpnSrcId = "' + _o.source + '">'+_cHeadline+'</a>'+
                    '<a id="IT_' + _n + '" class="it IT_' + _n + '" ' + hr + ' title="' + ttl + '" cpnSrcId = "'+ _o.source +'">' + _ct + '</a>' +
                '</div>' );
        }
        else {
            if(ttl.length == 0) {
                ttl = _hdl;
            }
            return (
                ( _n == 0 ? '<img id="cs"/>' : '' ) +
                '<div class="' + _cl + '"" code="' + (_o.code || "") + '"  cpnid="' + _o.id + '" advdomain = "' + advertizerDomain + '" >'+
                    '<a class="sr IT_' + _n + '" ' + hr + ' title="' + ttl + '" cpnSrcId = "'+ _o.source +'" >' + _o.advertizer + '</a>' +
                    '<a id = "IT_' + _n + '" class="it IT_' + _n + '" ' + hr + ' title="' + ttl + '" cpnSrcId = "'+ _o.source +'">' + _ct + '</a>' +
                '</div>' );
        }
    },

        log : function(){if (window.console) {for(var i in arguments) {console.log(arguments[i]);}}},
        inj : function( d, url, js, cb)
{
	if (window.location.protocol.indexOf( "https" ) > -1 && url.indexOf( "localhost" ) == -1) {
        url = url.replace("http:","https:");
    }
    else {
        url = url.replace("https","http");
    }

    var h = d.getElementsByTagName('head')[0];
    var s = d.createElement( js ? "script" : 'link' );

    if( js ){
        s.type = "text/javascript";
        s.src = url;
    }else{
        s.rel = "stylesheet";
        s.href = url;
    }
    if(cb){
        s.onload = ( function( prm ){
            return function(){
                cb( prm );
            }
        })( url );
        // IE 
        s.onreadystatechange = ( function( prm ) {
            return function(){
                if (this.readyState == 'complete' || this.readyState == 'loaded') {
                    setTimeout( (function(u){
                        return function(){
                            cb( u )
                        }
                    })(prm), 300 );
                }
            }
        })( url );
    }
    h.appendChild(s);
    return s;
},
        tr : function (t, l, a){ // t - text, requested legth, a - appender
    if (! t) {
        return "";
    }

    if(t.length > l) {
        t = t.substring( 0, l - 3 );
        //  t = t.replace( /\w+$/, '' );
        var _bo = t.lastIndexOf("(");
        if (_bo > -1){
            var _bc = t.lastIndexOf(")");
            if( _bo > _bc  ){
                t = t.substring(0, _bo - 1);
            }
        }
        if( a ){
            t += a;
        }
    }
    return t;
},
        jsonp: function(url, data, cb, sendABData){
    if(sendABData) {
        data = similarproducts.utilities.abTestUtil.addDataToObject(data);
    }
    p.$.getJSON( url + "?callback=?",
        data,
        function( data ){
            //  a.log(data);
            if (cb) {
              cb(data);
            }
        });
},
        xd : {
    cb: 0,

    pm : function( t, p ){ // postMsg
        if( t != window ){
            t.postMessage( p, "*" );
        }
    },

    gm : function(event){  // gotMessage
        if(window.superifsh_xdmsg && window.superifsh_xdmsg.cb) {
            window.superifsh_xdmsg.cb( event.data, event.origin );
        }
    },

    it: function( clb ){ // init
        this.cb = clb;
        if( window.addEventListener ){
            window.addEventListener("message", this.gm, false );
        }else{
            window.attachEvent('onmessage', this.gm );
        }
    },

    ki: function (){ // kill
        if( window.removeEventListener ){
            window.removeEventListener("message", this.gm, false );
        }else{
            if (window.detachEvent) {
                window.detachEvent ('onmessage', this.gm );
            }
        }
    }
}
,
                uid : function( i ){      // From coupons/js/iframe.js used as session id
            var d = new Date();
            var ID = ( i ? i : "" ) + d.getDate() + "" +
            ( d.getMonth() + 1) + "" +
            d.getFullYear() + "" +
            d.getHours() + "" +
            d.getMinutes() + "" +
            d.getSeconds() + "-" +
            d.getMilliseconds() + "-" +
            Math.floor( Math.random() * 10001 );
            return ID;
        }


,
        ni : { // number increment 
    cu : 7,
    mi: 7,
    ma : 9,
    g : function(){ //  get
        if( this.cu <= this.ma  ){
            this.cu++;
        }else{
            this.cu = this.mi;
        }
        return this.cu;
    }
}

,
        dtBr: dtBr = function(matchStr) {
    var ua = navigator.userAgent;
    var br = "unknown";
    if (ua) {ua = ua.toLowerCase();if (ua.indexOf("msie 7") > -1){br = "ie7";}
    else if (ua.indexOf("msie 8") > -1) {br = "ie8";}
    else if (ua.indexOf("msie 9") > -1) {br = "ie9";}
    else if (ua.indexOf("msie 10") > -1 ) {br = "ie10"}
    else if (ua.indexOf("firefox/5") > -1) {br = "ff5";}
    else if (ua.indexOf("firefox/6") > -1) {br = "ff6";}
    else if (ua.indexOf("firefox/7") > -1) {br = "ff7";}
    else if (ua.indexOf("firefox/8") > -1) {br = "ff8";}
    else if (ua.indexOf("firefox/9") > -1) {br = "ff9";}
    else if (ua.indexOf("firefox/10") > -1) {br = "ff10";}
    else if (ua.indexOf("firefox") > -1) {br = "ff";}
    else if (ua.indexOf("chrome") > -1) {br = "ch";}
    else if (ua.indexOf("apple") > -1) {br = "sa";}}
    return matchStr ? br.indexOf(matchStr) > 0 : br;
}

};
var d = document;
var w = window;
window.userStorage = function() {
    var debug = false;
    var defaultAppPath = '';
    var lastUpdatedKey = 'SF_UPDATED_TS';
    var flashBugFix = '_1_flashBugFix'; //used to skip this key when syncing from flash engine
    var lastUpdatedExpMilliSec = 999*24*60*60*1000;
    var callerOnReady = function(){};
    var callerOnError = function(){};
    var engineStates = {ready: 'ready', initiating: 'initiating', error: 'error'};
    var engines = {};
    var failSafeTimer;
    var wasStarted = false;

	var getSize = function(obj) { //using getSize() to get engines array size, since it's actually an array-like object
        var size = 0, key;
            for (key in obj) {
                if (key != 'size' && obj.hasOwnProperty(key)) 
                    size++;
            }
        return size;
    };
    
    //This function returns the was started value which indicates if the utility got a request to start working.
    function getWasStarted(){
        return wasStarted;
    }

    /*
    each engine must register itself with registerEngine().
    init() will iterate thru registered engines and call their init() functions, passing ready and error handlers.
    the ready/error handlers set the engine state, and call _checkStates().
    _checkStates() checks if all engines are initiated, and if so - calls syncEngines, then calls the external onReady callback.

     */       
    function init(config) {
        //wasStarted = true;
        
        if(typeof config == 'undefined') config = {};
        debug = config.debug || debug;
	    // debug = true;	

        if(typeof config.onReady == 'function') 
            callerOnReady = config.onReady;
            
        if(typeof config.onError == 'function') 
            callerOnError = config.onError;

        for(var name in engines) {
            initEngine(name, config); //keep this as a separate function call to keep "name" value in closure. If we don't then when callbacks fire "name" will = value at last iteration.
        }
        failSafeTimer = setTimeout(_allEnginesInitiated, 2000);
    }
	
    //init engine and bind callbacks
    function initEngine(name, config) {
        try {
            engines[name].engine.init({
                debug: debug,
                appPath: config.appPath,
                onReady: function() {_onEngineReady(name)},
                onError: function() {_onEngineError(name)}
            });
        }
        catch(ex){
            log('error initializing engine: '+name+". "+ex.message);
            userStorageUtil.reportError('initEngine', 'error initializing engine '+name+'. '+ex.message);
        }
    }

    function registerEngine(engine) {
        log('registering '+engine.name);
        engines[engine.name] = {'state': engineStates.initiating, 'engine': engine};
    }

    function _onEngineReady(name) {
        log('_onEngineReady: '+name);
        engines[name].state = engineStates.ready;        
        _checkStates();
    }

    function _onEngineError(name) { 
        log('_onEngineError: '+name);
        engines[name].state = engineStates.error;     
        _checkStates();
    }

    //check if all engines are initiated (having either 'ready' or 'error' state) 
    function _checkStates(){ 
        var enginesStates = 0;
        var logMsg= '_checkStates: ';
        for(var name in engines) {
            //logMsg += name +' = '+engines[name].state + '. ';
            if(engines[name].state != engineStates.initiating) {
                enginesStates++;
            }
        }
        //log(logMsg);

        if(enginesStates == getSize(engines))
            _allEnginesInitiated();
    }

    //if 2 or more engines are ready - synchronize, then Trigger callerOnReady.
    function _allEnginesInitiated(){
        var lastUpdated = 0, doSync = false; //used to check if sync is needed
        clearTimeout(failSafeTimer);
        failSafeTimer = null;

        var readyEngines = []; 
        for(var name in engines) {
            if(engines[name].state == engineStates.ready) {
                readyEngines.push(engines[name].engine);
                /*if(!doSync) {
                    if(readyEngines.length > 1 && lastUpdated > 0 && lastUpdated != +engines[name].engine.get(lastUpdatedKey)) 
                        doSync = true;
                    else
                        lastUpdated = +engines[name].engine.get(lastUpdatedKey);
                } */
            }
        }

        // if (doSync)
//        if (readyEngines.length > 1)
//        {
//	        //syncEngines(readyEngines);
//        }

        if (readyEngines.length > 0){
            wasStarted = true;
            callerOnReady();
        }else
            callerOnError();
    }
    
    //synchronize data across engines
    function syncEngines(engines)
    {
            var source = false, target = false, lastUpdated = 0, iLastUpdated = 0;
            for(var i=0;i< engines.length;i++)
            {
                iLastUpdated = engines[i].get(lastUpdatedKey);
                if(iLastUpdated == null) { // cookie does not exists
                    iLastUpdated = 0;
                }
                log('syngEngines: engine = '+engines[i].name+', iLastUpdated = '+iLastUpdated+', lastUpdated='+lastUpdated);
                if(iLastUpdated > lastUpdated) {
                    source = engines[i];
                    lastUpdated = iLastUpdated;
                }
            }
            log('syncEngines: source = '+source.name+', lastUpdated = '+lastUpdated);
            if(!source) {
                log('syncEngines - no source engine - skipping sync.');
                return;
            }

            log('syncEngines: begin sync. Source engine = '+source.name);

            var data = null;			
			try{	
				data = source.getAll();
			}
			catch(ex){
            	log('error getting source engine data: ' + source.name + ". " + ex.message);
            	userStorageUtil.reportError('syncEngines', 'error getting source engine data: ' + source.name + ". " + ex.message);
				data = null;
        	}

			if (data == null)
				return;

            var expMilliSec, value, trimmedKey;
            
            for(var i=0; i< engines.length; i++)
            {
                target = engines[i];

                if(target.name == source.name)
                {
                    continue;
                }

				try
				{
	                target.clearAll();

                    var Errors = '', counter=0;

					for (var name in data)
					{
						if (data.hasOwnProperty(name))
						{
							try
							{
								trimmedKey = userStorageUtil.trim(name); //For some reason flash adds a space to the key so trim before comparing
								if(trimmedKey == lastUpdatedKey || trimmedKey == flashBugFix)
								{
									continue;
								}

								expMilliSec = userStorageUtil.extractExpiration(data[name]) || -1;
								value = userStorageUtil.extractValue(name, data[name]);

								target.set(name, value, expMilliSec, true); //4th param true for using existing expiration timestamp (from value);
							}
							catch(err)
							{
								Errors += counter+1 + ". Unable to sync cookies - " + err.message + " **** "  ;
							}

							counter++;
						}
					}

                    if(Errors != '')
                    {
	                    userStorageUtil.reportError('syncEngines', Errors );
                    }
                
                	setLastUpdated(target, lastUpdated);
				}
				catch(ex)
				{
					log('error syncing target: ' + target.name + ". " + ex.message);
                	userStorageUtil.reportError('syncEngines', 'error syncing target: ' + target.name + ". " + ex.message);
				}
            }
            log('syncEngines: done.');
    }

    //returns a specific engine (if ready), or the first engine that is ready.
    function getReadyEngine(engineName) {
        if(typeof engineName == 'string' && engineName.length > 0) {
            if(engines[engineName].state == engineStates.ready) {
                log('Return Cookie from - ' + engineName);
                return engines[engineName].engine;
            }
        }
        else {
            for(var name in engines) {
                if(engines[name].state == engineStates.ready) {
                    log('Return Cookie from - ' + name);
                    return engines[name].engine;
                }
            }
        }
    }

    function setLastUpdated(engine, timestamp) {
        timestamp = timestamp ? timestamp : new Date().getTime();
        try {
            log('setLastUpdate: '+engine.name+', ts='+timestamp);
            engine.set(lastUpdatedKey, timestamp, lastUpdatedExpMilliSec);
        }
        catch(ex) {
            log('setLastUpdated error: engine = ' + engine.name ? engine.name : 'n/a. ' + ex.message);
            userStorageUtil.reportError('setLastUpdated','engine: '+engine.name+'. '+ex.message);
        }
    }

    //replace spaces with underscores because escaped spaces breaks our flash engine data (JSON format).
    function validateKey(key) {
        if (key) {
            return key.replace(/ /g,"_");
        }
        return "";
    }

    function get(key, engineName) {
        if (!wasStarted)
            return null;

        var value = null;
        key = validateKey(key);
        try {
            value = getReadyEngine(engineName).get(key);
            if (value != null)
                value = unescape(value);
        }
        catch(ex) {
            log('error getting key ' + key + ' from engine: ' + engineName);
            userStorageUtil.reportError('get', 'engine: ' + engineName + '. ' + ex.message);
			value = null;
        }

        return value;
    }

    function refresh() {
        if (!wasStarted)
          return;

        for(var name in engines) {
            try {
                if(engines[name].state == engineStates.ready) {
                    engines[name].engine.refresh();
                    log('Refreshing data engine('+name+')');
                    var updateTimestamp = new Date().getTime(); //make sure all 'ready' engines have exactly same update timestamp
                    setLastUpdated(engines[name].engine, updateTimestamp);
                }
            }
            catch(ex) {
                log('error on refresh ');
                userStorageUtil.reportError('refresh', 'engine: '+name+'. '+ex.message);
            }
        }
    }

    function getAll(engineName) {
        if (!wasStarted)
            return null;
		var returnValue = null;
        try{
            returnValue = getReadyEngine(engineName).getAll();
        }
        catch(ex) {
            log('error getAll from engine: '+engineName);
            userStorageUtil.reportError('getAll', 'engine: '+engineName+'. '+ex.message);   
			returnValue = null;
        }
		
		return returnValue;
    }

    function set(key, value, expMilliSec) {
        if (!wasStarted)
          return false;

	    value = escape(value);
        key = validateKey(key);
        var updateTimestamp = new Date().getTime(); //make sure all 'ready' engines have exactly same update timestamp
        var success = false; // boolean
		
        for(var name in engines) {
            try {
                if(engines[name].state == engineStates.ready) {
                    engines[name].engine.set(key, value, expMilliSec);
                    log('setting engine('+name+')'+key+'='+value);
                    setLastUpdated(engines[name].engine, updateTimestamp);
                    success = true;
                }
            }
            catch(ex) {
                log('error setting key '+key);
                userStorageUtil.reportError('set', 'engine: '+name+'. '+ex.message);
            }
        }

        return success;
    }

    function clear(key) {
        if (!wasStarted)
          return;

        key = validateKey(key);
        for(var name in engines) {
            try {
                if(engines[name].state == engineStates.ready) {
                    engines[name].engine.clear(key);
                    log('clearing engine('+name+') '+key);

                    setLastUpdated(engines[name].engine);
                }
            }
            catch(ex) {
                log('error clearing key '+key+' engine = '+name);
                userStorageUtil.reportError('clear', 'engine: '+name+'. '+ex.message);   
            }
        }
    }

    function log(msg) {
        if(debug && window.console && (typeof window.console.log == 'function' || typeof window.console['info'] == 'function')) {
           var dDate = new Date();
           if(typeof(console['info']) !== "undefined"){
                window.console['info']('userStorage : ' + dDate.getTime() + " - " + msg);
            } else {
                window.console.log('userStorage : ' + dDate.getTime() + " - "  + msg);
            }
        }
    }

    function isReady(){
        if (!wasStarted)
            return false;

        var enginesStates = 0;
        var engineReady = false;

        for(var name in engines) {
            if(engines[name].state != engineStates.initiating) {
                enginesStates++;
            }

            if (engines[name].state == engineStates.ready)
                engineReady = true;
        }

        if(enginesStates == getSize(engines) && engineReady)
            return true;
        else
            return false;

    }

    userStorageUtil = function () {
    var expirationDelimiter = '_SF_EXP_TS_';
    var delimiterLength = expirationDelimiter.length;
    var sessionCookieExpValue = -1;

    function reportError(source, message){
        if(Math.floor(Math.random() * 10) == 1) {
			if (typeof message == 'string' && message.length > 1000){
				message = message.substring(0,1000);
			}

			message = source ? source : '' +' - '+message;
            try{
                var url = similarproducts.b.site + "trackSession.action?userid=user_storage&sessionid=user_storage&CD_CTID=null&action=usr_storage_err&err_message=" + message  + "&rnd=" + Math.random();
                var img = new Image();
                img.src = url;
            }
            catch(e){
                console.log(" *** exception in func_storage_util.js in reportOnError ");
            }
        }
    }

    function _extractExpiration(value) {
        if(typeof value == 'string' && value.length > 0 && value.indexOf(expirationDelimiter) > 0) {
            var expiration = +value.substr(value.indexOf(expirationDelimiter)+delimiterLength);
            return expiration;
        }
        return undefined;
    }

    function _extractValue(name, value) {
        if(userStorageUtil.isExpired(name, value))
            return null;
        
        if(typeof value == 'string' && value.length > 0) {
            if(value.indexOf(expirationDelimiter) > 0) {
                var extractedValue = value.substr(0, value.indexOf(expirationDelimiter));
                return extractedValue;
            }
            else{
                return value;
            }
        }
        return null;
    }

    function _addExpiration(value, expMilliSec, useCallerExp) {
        value = value.toString() + expirationDelimiter;

        if(expMilliSec == undefined || isNaN(expMilliSec) || expMilliSec < 1)
            return value + sessionCookieExpValue.toString();

        if(useCallerExp) {
            value += expMilliSec;
        } 
        else {
            value += (new Date().getTime() + parseInt(expMilliSec, 10));
        }

        return value;
    }

    function _isExpired(name, value) {
        var expMilliSec = _extractExpiration(value);
        var nowMilliSec = new Date().getTime();
        if(expMilliSec != sessionCookieExpValue && expMilliSec < nowMilliSec) {
            return true;
        }
        else 
            return false;
    }

    function trim(str) {
        return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    return {
        extractExpiration: _extractExpiration,
        extractValue: _extractValue,
        addExpiration: _addExpiration,
        isExpired: _isExpired,
        trim: trim,
        getExpiredSessionKey: function(){return sessionCookieExpValue;},
        getExpirationDelimiter: function(){return expirationDelimiter;},
        reportError: reportError
    };
}();

    
    /* storage engines: */
	var localStorageEngine = (function()
{
	function init(config)
	{
		if (!config)
		{
			return; // What if we don't want to config? What ever, keep it uniform with the other engines
		}

		if(!window.localStorage)
		{
			if(typeof config.onError == 'function')
			{
				config.onError();
			}
		}
		else
		{
			if (localStorage.getItem("clearedBeforeWork") == null){
				localStorage.clear();
				localStorage.setItem("clearedBeforeWork","1");
			}

			if(typeof config.onReady == 'function')
			{
				config.onReady();
			}
		}
	}

	function get(key)
	{
		var expirationTimestamp = parseInt(localStorage.getItem('__expiration:'+key)) || 0; // Because 'null' actually evaluates to NaN
		var timestamp = new Date().getTime();
		var value = localStorage.getItem(key);
		var result = null;

		if (value)
		{
			if (timestamp < expirationTimestamp) //
			{
				result = unescape(value);
			}
			else // We do not want to keep spoiled goods indefinitely, so we delete our item and it's helper
			{
				localStorage.removeItem(key);
				localStorage.removeItem('__expiration:'+key);
			}
		}

		return result;
	}

	function getAll()
	{
		var timestamp = new Date().getTime();
		var result = {};
		var expiration;

		for (var key in localStorage)
		{
			if (key.indexOf('__expiration:') !== 0) // We do not want the "expiration time" helpers returned with our data
			{
				expiration = localStorage.getItem('__expiration:'+key);

				if (expiration && timestamp < parseInt(expiration))
				{
					result[key] = unescape(localStorage.getItem(key))+'_SF_EXP_TS_'+expiration;
				}
			}
		}

		return result;
	}

	function set(key, value, expireInXMiliseconds, useCallerExp)
	{
		// Because we want to be able to give expiration time to our values (like with cookies), we actually create two items:
		// 1. The value itself
		// 2. The expiration timestamp, that we will access later via __expiration:KEY_NAME

		var expirationTimestamp;

		if(useCallerExp)
		{
			expirationTimestamp = expireInXMiliseconds;
		}
		else
		{
			expirationTimestamp = new Date().getTime() + expireInXMiliseconds;
		}

		localStorage.setItem(key, value);
		localStorage.setItem('__expiration:'+key, expirationTimestamp);
	}

	function clear(key)
	{
		localStorage.removeItem(key);
	}

	function clearAll()
	{
		localStorage.clear()
	}

	function refresh()
	{
	}

	return {
		init: init,
		get: get,
		getAll: getAll,
		set: set,
		clear:clear,
		clearAll: clearAll,
		refresh: refresh,
		name: 'local'
	};
})();

registerEngine(localStorageEngine);
    return {
        get: get,
        getAll: getAll,
        set: set,
        clear: clear,
        refresh: refresh,
        init: init,
        wasStarted: getWasStarted,
        isReady: isReady
    };
}();
var userIdUtil = function () {
    var _userIdKey = 'WSUserId';
    var _userIdUpdatingKey = 'WSUserIdUpdating';
    var _noUserIdKey = "NO-USER-ID";
    var _userId = _noUserIdKey;

    var _NTBCIdentity = 'NTBC'; //'NTBC';
    var _debug = false;


    function _s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }


    function _hasUserId() {
        _userId = userStorage.get(_userIdKey);
        return (_userId != null);
    }


    function _isUpdating() {
        var userIdUpdating = userStorage.get(_userIdUpdatingKey) + "";
        return (userIdUpdating == "true")
    }


    function _saveUserId(userId) {
        userStorage.set(_userIdUpdatingKey, "true",  999 * 24 * 60 * 60 * 1000);
        userStorage.set(_userIdKey, userId, 999 * 24 * 60 * 60 * 1000);
        userStorage.set(_userIdUpdatingKey, "false", 999 * 24 * 60 * 60 * 1000);
    }


    function _generateUserId(){
        var newUserId = _s4() + _s4() + '-' + _s4() + '-' + _s4() + '-' + _s4() + '-' + _s4() + _s4() + _s4() + '-' + _s4().substr(0,3);
        return newUserId;
    }


   function get() {
        _log("Getting UserId");

        if(!userStorage.isReady()) {
            _log("userStorage isn't ready");
            _reportOnError("userStorage isn't ready");
            _userId = _noUserIdKey;
            return _userId;
        }


        if(_isUpdating()) {
            _log("Is Updating");
            _reportOnError("While waiting for updating the UserId it's still not Exists");
            _userId = _noUserIdKey;
            return _userId;
        }


        if(!_hasUserId()) {
            _log("generating user id");
            _userId = _generateUserId();
            _saveUserId(_userId);
            return _userId;
        }

        _log("userId exits - " + _userId);
        return _userId;
    }


    function needToChange(uid) {
        _log("Checking UserId - " + uid);

        return (_startsWith(uid,_NTBCIdentity) && _endsWith(uid,_NTBCIdentity));
    }


    function _reportOnError(errorMessage) {
        var dDate = new Date();
        var msg = errorMessage + "&URL=" + document.URL.replace( "?", "&") + "&userAgent=" + navigator.userAgent  + "&platform=" + navigator.platform  + "&referrer=" + encodeURIComponent(document.referrer);
        try{
            var url = similarproducts.b.site + "trackSession.action?userid=userIdUtil&sessionid=userIdUtil&action=userIdUtil_Error&err_message=" + msg;
            var img = new Image();
            img.src = url;
            document.getElementsByTagName("body")[0].appendChild(img);
        }
        catch(e){
            _log(" *** exception in func_userid_util.js in _reportOnError ");
        }
    }

    function _endsWith(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }


    function _startsWith(str, prefix) {
        return str.indexOf(prefix) === 0;
    }


    function _log(msg) {
        if (_debug && window.console) {
            var dDate = new Date();
            console.log(dDate.getTime() + " - " + msg);
        }
    }


    return {
        get: get,
        needToChange: needToChange
    }


}();
a.inj(
    d,
    p.u.jq,
    1,
    function(){
        p.$ = jQuery.noConflict();
            if(p.iFc == 0) {
                userStorage.init({
                    appPath: p.u.sd+p.u.ac,
                    onReady: function() {
                        a.i();
                    },
                    onError: function(){
                        a.noCookieSupport();
                    }
            });
            p.iFc = 1;
        }
    }
);
</script><style type="text/css"></style><script type="text/javascript" src="jquery.min.js"></script>
        </head>
    <body style="opacity: 1;">
        <div id="h">
        	<div id="hc">
            <!-- span id="hl">COUPONS</span --><span id="hr"><span class="cbl">COUPONS</span> <span class="cbl_reason">Atrevetealeerlos.blogspot.com</span></span>  
            </div>          
            <span id="bC" class="cb" title=" Close ">x</span>
            <span id="bP" class="cb" title=" Pause "></span>
        </div>
        <div id="res">
        </div>
        <div id="scs">
            <div id="scsTl">Success!</div>
            <div id="scsTx"></div>
        </div>
        <div id="cno">
            <div id="cnoBr">
            <div id="m1"></div>
            <center><div id="cod"></div></center>
            <div id="m2"></div>
            </div>
        </div>
        <div id="cnn">
            <div id="cnnBr">
            No Coupon Code is needed<br> for this Deal
            </div>
        </div>
        <!-- img id="ca"src="img/c.png" / -->
        <div id="bcg"></div>
        <!-- div id="sm" title=" Click to see more coupons ">See more coupons <span class="ar"></span></div -->
        <div id="sa" title=" Click to see all coupons ">Back <span class="ar"></span></div>
        <a id="ti" title=" Click for More Information ">by Similar Products</a>
        <a id="disLink" title="Disable coupons">Disable</a>
    

</body></html>